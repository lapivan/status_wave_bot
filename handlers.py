# handlers.py

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import database as db

router = Router()

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å—Ç–∞—Ç—É—Å—ã) –¥–ª—è FSM
class UserState(StatesGroup):
    waiting_for_status = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –û–î–ò–ù —Å—Ç–æ–ª–±–µ—Ü
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/set_text")],
        [KeyboardButton(text="/my_status")],
        [KeyboardButton(text="/clear_status")],
        [KeyboardButton(text="/help")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É..."
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    await db.add_user(user_id, username)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø StatusWave Bot ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–≤–æ–∏–º –¥—Ä—É–∑—å—è–º.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_text - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å\n"
        "/my_status - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/clear_status - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –µ–µ:",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "ü§ñ StatusWave Bot - –ü–æ–º–æ—â—å\n\n"
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–æ–π /set_text\n"
        "2. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É\n"
        "3. –ö–æ–≥–¥–∞ —Ç–µ–±—è —É–ø–æ–º—è–Ω—É—Ç (@—Ç–≤–æ–π_–Ω–∏–∫), —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á—É —Ç–≤–æ–∏–º —Å—Ç–∞—Ç—É—Å–æ–º!\n\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_text - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å\n"
        "/my_status - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/clear_status - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    )
    await message.answer(help_text, reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_status
@router.message(Command("my_status"))
async def cmd_my_status(message: Message):
    user_id = message.from_user.id
    current_status = await db.get_user_status(user_id)
    if current_status:
        await message.answer(f"üìù –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\"{current_status}\"", reply_markup=main_keyboard)
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π /set_text —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_status
@router.message(Command("clear_status"))
async def cmd_clear_status(message: Message):
    user_id = message.from_user.id
    await db.update_user_text_status(user_id, None)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ None
    await message.answer("‚úÖ –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_text - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.message(Command("set_text"))
async def cmd_set_text(message: Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏–º –¥—Ä—É–∑—å—è–º:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(UserState.waiting_for_status)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.message(UserState.waiting_for_status, F.text)
async def process_status_text(message: Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞", "cancel"]:
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.", reply_markup=main_keyboard)
        return
        
    user_id = message.from_user.id
    new_status = message.text
    await db.update_user_text_status(user_id, new_status)
    await state.clear()
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω:\n\"{new_status}\"",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –õ–Æ–ë–û–ì–û —Ç–µ–∫—Å—Ç–∞ –≤ –õ–ò–ß–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–Ω–µ –≤ –≥—Ä—É–ø–ø–∞—Ö!)
@router.message(F.chat.type == "private", F.text)
async def handle_private_text(message: Message):
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã!\n"
        "–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (–í–ê–ñ–ù–û: —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ!)
@router.message(F.chat.type != "private")
async def handle_group_messages(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                mentioned_username = message.text[entity.offset:entity.offset + entity.length]
                pure_username = mentioned_username[1:]  # –£–±–∏—Ä–∞–µ–º '@'
                
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ username
                user_data = await db.get_user_status_by_username(pure_username)
                if user_data:
                    user_id, status_text = user_data
                    if status_text:
                        await message.reply(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mentioned_username} —Å–µ–π—á–∞—Å:\n\"{status_text}\""
                        )
                    else:
                        await message.reply(f"{mentioned_username} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç—É—Å.")
                break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ