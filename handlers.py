# handlers.py

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import database as db

router = Router()

class UserState(StatesGroup):
    waiting_for_status = State()
    waiting_for_voice_status = State()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å"), KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç")],
        [KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)

@router.message(F.text.in_(["üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å", "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å", "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å", "‚ùì –ü–æ–º–æ—â—å"]))
async def handle_button_text(message: Message, state: FSMContext):
    text = message.text
    
    if text == "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å":
        await cmd_set_text(message, state)
    elif text == "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å":
        await cmd_set_voice(message, state)
    elif text == "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å":
        await cmd_my_status(message)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç":
        await cmd_clear_text_status(message)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å":
        await cmd_clear_voice_status(message)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await cmd_help(message)

@router.message(Command("start"))
async def cmd_start(message: Message):
    print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    username = message.from_user.username
    await db.add_user(user_id, username)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø StatusWave Bot ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ), –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –≤ –≥—Ä—É–ø–ø–∞—Ö.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å\n"
        "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
        "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å\n"
        "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "‚ùì –ü–æ–º–æ—â—å\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ /help –æ—Ç {message.from_user.id}")
    help_text = (
        "ü§ñ StatusWave Bot - –ü–æ–º–æ—â—å\n\n"
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π)\n"
        "2. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É\n"
        "3. –ö–æ–≥–¥–∞ —Ç–µ–±—è —É–ø–æ–º—è–Ω—É—Ç (@—Ç–≤–æ–π_–Ω–∏–∫), —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á—É —Ç–≤–æ–∏–º —Å—Ç–∞—Ç—É—Å–æ–º!\n\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_text - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å\n"
        "/set_voice - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
        "/my_status - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/clear_status - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    )
    await message.answer(help_text, reply_markup=main_keyboard)

@router.message(Command("my_status"))
async def cmd_my_status(message: Message):
    print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ /my_status –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    
    text_status = await db.get_user_status(user_id)
    voice_status_id = await db.get_user_voice_status(user_id)
    
    if text_status or voice_status_id:
        response = "üìä –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n"
        if text_status:
            response += f"üìù –¢–µ–∫—Å—Ç: \"{text_status}\"\n"
        if voice_status_id:
            response += "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
        await message.answer(response, reply_markup=main_keyboard)
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞.", reply_markup=main_keyboard)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("clear_text"))
async def cmd_clear_text_status(message: Message):
    print(f"üîπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    await db.clear_text_status(user_id)
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=main_keyboard)

@router.message(Command("clear_voice"))
async def cmd_clear_voice_status(message: Message):
    print(f"üîπ –û—á–∏—Å—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    await db.clear_voice_status(user_id)
    await message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=main_keyboard)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É –æ—á–∏—Å—Ç–∫–∏
@router.message(Command("clear_status"))
async def cmd_clear_all_statuses(message: Message):
    print(f"üîπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç {message.from_user.id}")
    user_id = message.from_user.id
    await db.clear_all_statuses(user_id)
    await message.answer("‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", reply_markup=main_keyboard)

@router.message(Command("set_text"))
async def cmd_set_text(message: Message, state: FSMContext):
    print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ /set_text –æ—Ç {message.from_user.id}")
    await message.answer(
        "üìù –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(UserState.waiting_for_status)

@router.message(Command("set_voice"))
async def cmd_set_voice(message: Message, state: FSMContext):
    print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ /set_voice –æ—Ç {message.from_user.id}")
    await message.answer(
        "üé§ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(UserState.waiting_for_voice_status)

@router.message(UserState.waiting_for_status, F.text)
async def process_status_text(message: Message, state: FSMContext):
    print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç {message.from_user.id}")
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞", "cancel"]:
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.", reply_markup=main_keyboard)
        return
        
    user_id = message.from_user.id
    username = message.from_user.username
    new_status = message.text
    
    await db.update_user_text_status(user_id, username, new_status)
    await state.clear()
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω:\n\"{new_status}\"",
        reply_markup=main_keyboard
    )

@router.message(UserState.waiting_for_voice_status, F.voice)
async def process_voice_status(message: Message, state: FSMContext):
    print(f"üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç {message.from_user.id}")
    if message.text and message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞", "cancel"]:
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.", reply_markup=main_keyboard)
        return
        
    user_id = message.from_user.id
    username = message.from_user.username
    voice_message_id = message.voice.file_id
    
    await db.update_user_voice_status(user_id, username, voice_message_id)
    await state.clear()
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=main_keyboard
    )

@router.message(F.chat.type != "private")
async def handle_group_messages(message: Message):
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                mentioned_username = message.text[entity.offset:entity.offset + entity.length]
                pure_username = mentioned_username[1:]
                
                print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{pure_username}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                text_data = await db.get_user_status_by_username(pure_username)
                if text_data:
                    user_id, text_status = text_data
                    if text_status:
                        await message.reply(f"–°—Ç–∞—Ç—É—Å {mentioned_username}:\n\"{text_status}\"")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å
                voice_data = await db.get_user_voice_status_by_username(pure_username)
                if voice_data:
                    user_id, voice_status_id = voice_data
                    if voice_status_id:
                        await message.reply_voice(
                            voice=voice_status_id,
                            caption=f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å {mentioned_username}"
                        )
                break